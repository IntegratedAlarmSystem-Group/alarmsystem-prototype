package org.eso.ias.component.test

import org.eso.ias.prototype.input.Identifier
import org.eso.ias.prototype.input.AlarmValue
import org.eso.ias.prototype.input.HeteroInOut
import scala.collection.mutable.{Map => MutableMap }
import org.eso.ias.prototype.input.java.OperationalMode
import org.eso.ias.prototype.input.Validity
import org.eso.ias.prototype.input.java.IASTypes

/**
 * A common helper class to build data structures for testing
 * 
 * @param dasuId: The ID of the DASU where the ASCE runs (to build the iD)
 * @param asceId: The ID of the ASCE
 * @param outputId: the ID of the output HIO
 */
class CommonCompBuilder(
    dasuId: String, 
    asceId: String, 
    outputId: String) {
  require(Option[String](dasuId).isDefined)
  require(Option[String](asceId).isDefined)
  
  // The thread factory used by the setting to async
  // initialize and shutdown the TF objects
  val threadFactory = new TestThreadFactory()
  
  // The ID of the DASU where the components runs
  val dasId = new Identifier(Some[String](dasuId),None)
  
  // The ID of the component running into the DAS
  val compID = new Identifier(Some[String](asceId),Option[Identifier](dasId))
  
  // The refresh rate of the component
  val mpRefreshRate = HeteroInOut.MinRefreshRate+500
  
  // The ID of the output generated by the component
  val outId = new Identifier(Some[String](outputId), None)
  // Build the MP in output
  val alarmVal = new AlarmValue()
  val output: HeteroInOut = HeteroInOut(
    outId,
    mpRefreshRate,
    alarmVal, 
    OperationalMode.OPERATIONAL,
    Validity.Unreliable, IASTypes.ALARM)
  
  // Create the HIO in input
 val hioId = new Identifier(Some[String]("HIO"),Option[Identifier](compID))
 val hio = HeteroInOut(
        hioId,
        mpRefreshRate,
        1L, 
        OperationalMode.OPERATIONAL,
        Validity.Unreliable, IASTypes.LONG)

  //val threadFactory: CompEleThreadFactory = new CompEleThreadFactory("Test-runningId")
  val requiredInputIDs = List(hioId.id.get)
  
  val inputsMPs = MutableMap(hioId.id.get->hio)
}