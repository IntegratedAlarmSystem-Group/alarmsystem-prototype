package org.eso.ias.component.test

import org.scalatest.FlatSpec
import org.eso.ias.prototype.transfer.TransferFunctionSetting
import org.eso.ias.prototype.transfer.TransferFunctionLanguage
import org.eso.ias.prototype.input.Identifier
import org.eso.ias.prototype.input.HeteroInOut
import org.eso.ias.prototype.input.java.OperationalMode
import org.eso.ias.prototype.input.Validity
import org.eso.ias.prototype.input.java.IASTypes
import org.eso.ias.prototype.input.AlarmValue
import org.eso.ias.prototype.compele.ComputingElement
import scala.collection.mutable.{Map => MutableMap }
import java.util.concurrent.ScheduledThreadPoolExecutor
import org.eso.ias.prototype.input.AlarmState
import java.util.Properties
import org.eso.ias.prototype.transfer.impls.MinMaxThresholdTF

class TestMinMaxThreshold extends FlatSpec{
  
  def withTransferSetting(testCode: TransferFunctionSetting => Any) {
    val threadFactory = new TestThreadFactory()
    
    // The TF executor to test
    val scalaMinMaxTF = new TransferFunctionSetting(
        "org.eso.ias.prototype.transfer.impls.MinMaxThresholdTF",
        TransferFunctionLanguage.scala,
        threadFactory)
    try {
      testCode(scalaMinMaxTF)
    } finally {
      assert(threadFactory.numberOfAliveThreads()==0)
      assert(threadFactory.instantiatedThreads==2)
    }
  }
  
  def withComp(testCode: (ComputingElement, MutableMap[String, HeteroInOut]) => Any) {
    // The thread factory used by the setting to async
    // intialize and shutdown the TF objects
    val threadFactory = new TestThreadFactory()
    
    // The TF executor to test
    val scalaMinMaxTF = new TransferFunctionSetting(
        "org.eso.ias.prototype.transfer.impls.MinMaxThresholdTF",
        TransferFunctionLanguage.scala,
        threadFactory)
    
    // The ID of the DAS where the components runs
    val dasId = new Identifier(Some[String]("MinMaxTF-DAS-ID"),None)
    
    // The ID of the component running into the DAS
    val compID = new Identifier(Some[String]("MinMaxTF-COMP-ID"),Option[Identifier](dasId))
    
    // The refresh rate of the component
    val mpRefreshRate = HeteroInOut.MinRefreshRate+500
    
    // The ID of the output generated by the component
    val outId = new Identifier(Some[String]("MinMaxOutputId"), None)
    // Build the MP in output
    val alarmVal = new AlarmValue()
    val output: HeteroInOut = HeteroInOut(
      outId,
      mpRefreshRate,
      alarmVal, 
      OperationalMode.OPERATIONAL,
      Validity.Unreliable, IASTypes.ALARM)
    
    // Create the HIO in input
   val hioId = new Identifier(Some[String]("HIO"),Option[Identifier](compID))
   val hio = HeteroInOut(
          hioId,
          mpRefreshRate,
          1L, 
          OperationalMode.OPERATIONAL,
          Validity.Unreliable, IASTypes.LONG)

    //val threadFactory: CompEleThreadFactory = new CompEleThreadFactory("Test-runningId")
    val requiredInputIDs = List(hioId.id.get)
    
    val inputsMPs = MutableMap(hioId.id.get->hio)
    
    // Instantiate one ASCE with a scala TF implementation
    val scalaTFSetting =new TransferFunctionSetting(
        "org.eso.ias.prototype.transfer.impls.MinMaxThresholdTF",
        TransferFunctionLanguage.scala,
        threadFactory)
    
    
    val props: Properties= new Properties()
    props.put(MinMaxThresholdTF.highOnPropName, "50")
    props.put(MinMaxThresholdTF.highOffPropName, "25")
    props.put(MinMaxThresholdTF.lowOffPropName, "-10")
    props.put(MinMaxThresholdTF.lowOnPropName, "-20")
    
    val scalaComp: ComputingElement = new ComputingElement(
       compID,
       output,
       requiredInputIDs,
       inputsMPs,
       scalaTFSetting,
       Some[Properties](props))
    
    try {
      testCode(scalaComp,inputsMPs)
    } finally {
      scalaComp.shutdown()
    }
  }
  
  behavior of "The MinMaxThreshold executor"
  
  it must "Correctly load, init and shutdown the TF executor" in withTransferSetting { scalaMinMaxTF =>
    assert(!scalaMinMaxTF.initialized)
    assert(!scalaMinMaxTF.isShutDown)
    scalaMinMaxTF.initialize("ASCE-MinMaxTF-ID", "ASCE-running-ID", System.getProperties)
    Thread.sleep(500)
    assert(scalaMinMaxTF.initialized)
    assert(!scalaMinMaxTF.isShutDown)
    scalaMinMaxTF.shutdown()
    Thread.sleep(500)
    assert(scalaMinMaxTF.initialized)
    assert(scalaMinMaxTF.isShutDown)
    
    
  }
  
  /**
   * Check the state of the alarm of the passed HIO
   * 
   * @param hio: the HIO to check the alarm state
   * @param alarmState: The state of the alarm
   */
  def checkState(asce: ComputingElement, alarmState: AlarmState.State): Boolean = {
    assert(asce.isAlarmComponent)
    val hio = asce.output
    assert(hio.iasType==IASTypes.ALARM)
    val value: AlarmValue = hio.actualValue.get.value.asInstanceOf[AlarmValue]
    value.alarmState==alarmState
  }
  
  it must "run the scala Min/Max TF executor" in withComp { (scalaComp, inputsMPs) =>
    val stpe: ScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(5)
    scalaComp.initialize(stpe)
    Thread.sleep(1000)
    // Change the input to trigger the TF
    val changedMP = inputsMPs(inputsMPs.keys.head).updateValue(5L)
    scalaComp.inputChanged(Some(changedMP))
    Thread.sleep(2500)
    assert(checkState(scalaComp,AlarmState.Cleared))
    
    // Activate high
    scalaComp.inputChanged(Some(inputsMPs(inputsMPs.keys.head).updateValue(100L)))
    Thread.sleep(2500)
    assert(checkState(scalaComp,AlarmState.Active))
    
    // Increase does not deactivate the alarm
    scalaComp.inputChanged(Some(inputsMPs(inputsMPs.keys.head).updateValue(150L)))
    Thread.sleep(2500)
    assert(checkState(scalaComp,AlarmState.Active))
    
    // Decreasing without passing HighOn does not deactivate
    scalaComp.inputChanged(Some(inputsMPs(inputsMPs.keys.head).updateValue(40L)))
    Thread.sleep(2500)
    assert(checkState(scalaComp,AlarmState.Active))
    
    // Below HighOff deactivate the alarm
    scalaComp.inputChanged(Some(inputsMPs(inputsMPs.keys.head).updateValue(10L)))
    Thread.sleep(2500)
    assert(checkState(scalaComp,AlarmState.Cleared))
    
    // Below LowOff but not passing LowOn does not activate
    scalaComp.inputChanged(Some(inputsMPs(inputsMPs.keys.head).updateValue(-15L)))
    Thread.sleep(2500)
    assert(checkState(scalaComp,AlarmState.Cleared))
    
    // Passing LowOn activate
    scalaComp.inputChanged(Some(inputsMPs(inputsMPs.keys.head).updateValue(-30L)))
    Thread.sleep(2500)
    assert(checkState(scalaComp,AlarmState.Active))
    
    // Decreasing more remain activate
    scalaComp.inputChanged(Some(inputsMPs(inputsMPs.keys.head).updateValue(-40L)))
    Thread.sleep(2500)
    assert(checkState(scalaComp,AlarmState.Active))
    
    // Increasing but not passing LowOff remains active
    scalaComp.inputChanged(Some(inputsMPs(inputsMPs.keys.head).updateValue(-15L)))
    Thread.sleep(2500)
    assert(checkState(scalaComp,AlarmState.Active))
    
    // Passing LowOff deactivate
    scalaComp.inputChanged(Some(inputsMPs(inputsMPs.keys.head).updateValue(0L)))
    Thread.sleep(2500)
    assert(checkState(scalaComp,AlarmState.Cleared))
  }
  
}