package org.eso.ias.prototype.component

import org.eso.ias.prototype.input.Identifier
import org.eso.ias.prototype.input.MonitorPointBase
import org.eso.ias.prototype.input.MonitorPoint
import org.eso.ias.prototype.input.Validity
import org.eso.ias.prototype.input.AlarmValue
import scala.util.control.NonFatal
import javax.script.ScriptEngine
import javax.script.ScriptEngineManager
import org.eso.ias.prototype.behavior.BehaviorRunner
import org.eso.ias.prototype.behavior.BehaviorRunnerImpl
import org.eso.ias.prototype.behavior.JavaConverter
import scala.collection.mutable.HashMap
import org.eso.ias.prototype.input.AckState

/**
 * The immutable Integrated Alarm System Component (ASC) 
 * is the basic unit of the IAS.
 * 
 * It consists of a state (<code>ASCState</code>) and methods
 * to proceed to the next state.
 * 
 * The output is updated each time one of the input is updated:
 * a script checks the values of the inputs and generate the output.
 * It can be a AlarmValue but also a MonitorPoint[A] if the scripts
 * result in a value of type A (used to implement
 * so called synthetic parameters)
 * 
 * The output of a Component can, in turn, be the input 
 * of another Component.
 * 
 * A <code>AlarmSystemComponent</code> represents the state of the ASC
 * at a given point in time. It can be considered as a snapshot of the ASC
 * for the given inputs and output generated by running the script.
 * As such it can be used also offline to reproduce the state of the system
 * for debugging or simulation purposes.
 * 
 * <EM>Functioning</EM>
 * The ASC has an output, produced by the actualInputs that is refreshed at 
 * a given time interval.
 * Changes in the inputs are temporarily stored in the newInputs map.
 * When the refresh rate elapses the new value output with its validity is calculated 
 * from the newly received inputs (newInputs) and a new AlarmSystemComponent
 * is built.
 * 
 * @param ident: The unique ID of this Component
 * @param out: The the output generated by this Component
 *             after applying the script to the inputs
 *             It can or cannot be an AlarmValue
 * @param requiredInputs: The IDs of the inputs that this component
 *                        needs to generate the output. The list does not change
 *                        during the life time of the component.
 * @param actualInputs: The list of monitor points in input that generated the actual output
 * @param script: The script that manipulated the inputs and generate the output
 * @param newInputs: the map with the value of the monitr points in input
 *                   received after the last update of the output  
 * @see ASCState
 * @author acaproni
 */
class AlarmSystemComponent[T] (
    ident: Identifier,
    out: MonitorPoint[T],
    requiredInputs: List[String],
    actualInputs: List[MonitorPointBase],
    script: String,
    val newInputs: HashMap[String, MonitorPointBase])
    extends ASCState[T](ident,out,actualInputs,script) {
  require(requiredInputs!=None && !requiredInputs.isEmpty)
  require(requiredInputs.size==requiredInputs.size)
  
  /**
   * Update the output by running the user provided script against the inputs.
   * 
   * A change of the inputs means a change in at least one of
   * the inputs of the list. 
   * A change, in turn, can be a change  of 
   * - the value (or alarm) 
   * - validity
   * - mode 
   * The change triggers a recalculation of the Validity.
   * 
   * The number of inputs of a ASC does not change during the
   * life span of a component, what changes are the values,
   * validity or mode of the inputs.
   * 
   * In case of an alarm, being ACk or shelved does not trigger
   * a  recalculation of the output
   * 
   * @param theInputs: The list of inputs 
   * @return The new output
   */
  def inputChanged(theInputs: List[MonitorPointBase]): AlarmSystemComponent[T] = {
    
    println("Evaluating output..."+theInputs.length)
    
    // Build the map of inputs to pass to the behavior script
    
    
    val runner: BehaviorRunner[T] = new BehaviorRunnerImpl[T](id)
    runner.initialize()
    val converter = new JavaConverter(theInputs,ident)
    runner.eval(converter.javaInputs)
    runner.tearDown()
    
    this
  }
  
  /**
   * A monitor point changed: it is stored in the map
   * ready to be evaluated when refreshing the value
   * of the output 
   * 
   * @param mp: The new value of a monitor point in input
   */
  def inputChanged(mp: Some[MonitorPointBase]) {
    if (!newInputs.contains(mp.get.id.id.get)) {
      throw new IllegalStateException("Trying to pass aMP to a component that does not want it")
    }
    newInputs.synchronized {
      newInputs(mp.get.id.id.get)=mp.get
    }
  }
  
  /**
   * Get the alarm value of AlarmValue of the output.
   * 
   * @throws IllegalStateException: If the value of the output is None 
   *         or has a wrong type.
   */
  private def getOutAlarmValue: AlarmValue = {
    // Check if the value of the output is None i.e. the output has not yet 
    // been initialized.
    //
    // Having a output with a value of None should never happen because its value is
    // updated depending on the value of the inputs
    if (out.actualValue == None) {
      throw new IllegalStateException("Trying get an alarm but the value is None (alarm ID "+out.id+")") 
    }
    val value: Any = out.actualValue.get.value
    if (! value.isInstanceOf[AlarmValue]) {
      throw new IllegalStateException("Trying to get an alarm but the value has wrong type "+value.getClass()+" (alarm ID "+out.id+")")
    }
    value.asInstanceOf[AlarmValue]
  }
  
  /**
   * Shelve the output in response to an operator action.
   * 
   * This action is possible only if the output is a MonitorPoint[AlarmValue].
   * It is not needed to recalculate the output from the inputs when shelving an alarm.
   * 
   * @param newShelveState: True to shelve the alarm; false otherwise 
   * @return The ASC shelved
   */
  def shelve(newShelveState: Boolean): AlarmSystemComponent[T] = {
    
    val value: AlarmValue = getOutAlarmValue
    if (value.shelved==newShelveState) this // No change
    val newValue = value.shelve(newShelveState)
    
    val shelvedTypedMP=out.updateValue(newValue.asInstanceOf[T])
    
    new AlarmSystemComponent[T](ident,shelvedTypedMP,requiredInputs,actualInputs,script,newInputs)
    
  }
  
  /**
   * Acknowledge the output in response to an operator action.
   * 
   * This action is possible only if the output is a MonitorPoint[AlarmValue].
   * It is not needed to recalculate the output from the inputs when shelving an alarm.
   * 
   * @return The ASC acknowledged
   */
  def ack(): AlarmSystemComponent[T] = {
    
    val value: AlarmValue = getOutAlarmValue
    if (value.acknowledgement==AckState.Acknowledged) this // No change
    val newValue = value.acknowledge()
    
    val ackedTypedMP=out.updateValue(newValue.asInstanceOf[T]) 
    
    new AlarmSystemComponent[T](ident,ackedTypedMP,requiredInputs,actualInputs,script,newInputs)
  }
}
